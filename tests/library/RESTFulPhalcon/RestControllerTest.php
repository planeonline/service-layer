<?php
namespace RESTFulPhalcon;

use RESTFulPhalcon\RestModel\Exception as RestModelException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-26 at 15:47:11.
 */
class RestControllerTest extends \DBUnitTestCase
{
    /**
     * @var RestController
     */
    protected $object;

    /**
     * Controller's url, to address default model based on
     * @var string
     */
    protected $_url = '/plane';

    protected function getFixture(){
        return dirname(__FILE__)."/fixtures/planes.yml";
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp(\Phalcon\DiInterface $di = NULL, \Phalcon\Config $config = NULL)
    {
        $config = new \Phalcon\Config\Adapter\Ini(CONFIG_PATH);
        parent::setUp($di,$config);

        $this->object = $this->getMock('\RESTFulPhalcon\RestController',null,array(),'PlaneController');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * @covers RESTFulPhalcon\RestController::indexAction
     */
    public function testIndexAction()
    {

        $expectedPlanesFixture  = $this->getDataSet()->getTable('plane');

        $expectedPlanes = array();
        for($r = 0 ; $r < $expectedPlanesFixture->getRowCount(); $r++){
            $plane = $expectedPlanesFixture->getRow($r);
            $expectedPlanes[] = $plane;
        }

        $this->getDatabaseTester()->setDataSet($this->getDataSet());
        $this->getDatabaseTester()->onSetUp();

        $_SERVER["REQUEST_METHOD"] = "GET";
        $_SERVER["HTTP_HOST"] = "service.planeonline.local";
        $_SERVER["REQUEST_URI"] = "/plane";

        $raw = array("_url" => $this->_url);

        $this->object->setDefaultModelName('plane');
        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('plane',$guessedModelName);

        $mockRestRequest = $this->getMock("RESTFulPhalcon\RestRequest", array("getParams"));

        $mockRestRequest->expects($this->once())
            ->method("getParams")
            ->will($this->returnValue($raw));

        $this->object->setRestRequest($mockRestRequest);

        $expectedOutputRegex = '{"metadata":{"url":"service.planeonline.local","endpoint":"\\\/plane","method":"GET"},"results":\[{"metadata":{"status":"OK","code":200,"model":"plane","criteria":{"limit":{"number":"10","offset":"0"}},"size":10,"start":0,"total":3,"count":3},"result":\[{"id":1,"user":1,"make":1,"title":"plane title","description":"some description","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"0000-00-00 00:00:00","status":0},{"id":2,"user":1,"make":1,"title":"plane title","description":"some description","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"0000-00-00 00:00:00","status":0},{"id":3,"user":1,"make":1,"title":"plane title","description":"planes description","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"0000-00-00 00:00:00","status":0}]}]}';
        $this->expectOutputRegex($expectedOutputRegex);

        $this->object->indexAction();

    }

    /**
     * @covers RESTFulPhalcon\RestController::indexAction
     */
    public function testIndexActionOnEmptyTable()
    {

        $this->truncate('plane');

        $_SERVER["REQUEST_METHOD"] = "GET";
        $_SERVER["HTTP_HOST"] = "service.planeonline.local";
        $_SERVER["REQUEST_URI"] = "/plane";

        $raw = array("_url" => $this->_url);

//        $this->object->setDefaultModelName('plane');
        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $mockRestRequest = $this->getMock("RESTFulPhalcon\RestRequest", array("getParams"));

        $mockRestRequest->expects($this->once())
            ->method("getParams")
            ->will($this->returnValue($raw));


        $this->object->setRestRequest($mockRestRequest);

        $this->object->indexAction();
        $this->expectOutputString('{"metadata":{"url":"service.planeonline.local","endpoint":"\/plane","method":"GET"},"results":[{"metadata":{"status":"OK","code":200,"model":"Plane","criteria":{"limit":{"number":"10","offset":"0"}},"size":10,"start":0,"total":0,"count":0},"result":[]}]}');

    }



    /**
     * @covers RESTFulPhalcon\RestController::getRestResponse
     * @todo   Implement testGetRestResponse().
     */
    public function testGetRestResponse()
    {
        $response = $this->object->getRestResponse();
        $this->assertInstanceOf('RESTFulPhalcon\RestResponse',$response);
        $this->assertEmpty($response->getResults());
        $this->assertEquals('/plane',$response->getEndpoint());
        $this->assertEquals('GET',$response->getMethod());
        $this->assertEquals('service.planeonline.local',$response->getUrl());
    }

    /**
     * @covers RESTFulPhalcon\RestController::setRestRequest
     * @todo   Implement testSetRestRequest().
     */
    public function testSetRestRequest()
    {
        $restRequest = new RestRequest(array('param1'=>'param1Value'));

        $this->object->setRestRequest($restRequest);

        $this->setExpectedException('PHPUnit_Framework_Error','',4096);
        $this->object->setRestRequest(new \ArrayObject());
        $this->assertEquals($restRequest, $this->object->getRestRequest());

    }

    /**
     * @covers RESTFulPhalcon\RestController::getRestRequest
     * @todo   Implement testGetRestRequest().
     */
    public function testGetRestRequest()
    {
        $request = $this->object->getRestRequest();
        $this->assertInstanceOf('RESTFulPhalcon\RestRequest',$request);
    }

    /**
     * @covers RESTFulPhalcon\RestController::setDefaultModelName
     * @todo   Implement testSetDefaultModelName().
     */
    public function donttestSetDefaultModelName()
    {

        $this->object->setDefaultModelName('ModelX');
        $this->assertEquals('ModelX',$this->object->getDefaultModel(true));
    }

    /**
     * @covers RESTFulPhalcon\RestController::getDefaultModel
     */
    public function testGetDefaultModel()
    {
//        $this->setExpectedException('RESTFulPhalcon\RestModel\Exception','Guessed model "RESTFulPhalcon\Rest" is not exists');
        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);
    }

    /**
     * @covers RESTFulPhalcon\RestController::postAction
     * @todo   Implement testPostAction().
     */
    public function testPostAction()
    {
        $_SERVER["REQUEST_METHOD"] = "POST";

        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $raw = array(
            array("user"=>"1","make"=>"1","title"=>"SK-1","description"=>"Introducing the world2019s most popular aircraft. ","status"=>1),
            array("user"=>"2","make"=>"1","title"=>"SK-2","description"=>"Introducing the world2019s most popular aircraft. ","status"=>1),
            array("user"=>"1","make"=>"2","title"=>"SK-3","description"=>"Introducing the world2019s most popular aircraft. ","status"=>1),
        );

        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $mockRestRequest = $this->getMock("RESTFulPhalcon\RestRequest", array("getParams"));

        $mockRestRequest->expects($this->once())
            ->method("getParams")
            ->will($this->returnValue($raw));

        $this->object->setRestRequest($mockRestRequest);

        $request = $this->object->getRestRequest();

        $this->object->postAction();

        $outputRegex = '{"metadata":{"url":"service.planeonline.local","endpoint":"\\\/plane","method":"POST","results":3,"success":1,"failed":2},"results":\[{"metadata":{"status":"created","code":"201","model":"Plane"},"result":{"user":1,"make":1,"title":"SK-1","description":"Introducing the world2019s most popular aircraft. ","status":1,"id":\d}},{"metadata":{"status":"bad post request","code":"400","model":"Plane"},"result":\["The provided user does not exists"]},{"metadata":{"status":"bad post request","code":"400","model":"Plane"},"result":\["The provided make does not exists"]}]}';

        $this->expectOutputRegex($outputRegex);

    }

    /**
     * @covers RESTFulPhalcon\RestController::putAction
     * @todo   Implement testPutAction().
     */
    public function testPutAction()
    {
        $_SERVER["REQUEST_METHOD"] = "PUT";

        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $raw = array(
            array("id"=>"1", "user"=>"1","make"=>"1","title"=>"SK-101","description"=>"Introducing the world2019s most popular aircraft. "),
            array("id"=>"2", "user"=>"1","make"=>"1","title"=>"SK-102","description"=>"Introducing the world2019s most popular aircraft. "),
            array("id"=>"3", "user"=>"1","make"=>"1","title"=>"SK-103","description"=>"Introducing the world2019s most popular aircraft. "),
        );

        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $mockRestRequest = $this->getMock("RESTFulPhalcon\RestRequest", array("getParams"));

        $mockRestRequest->expects($this->once())
            ->method("getParams")
            ->will($this->returnValue($raw));

        $this->object->setRestRequest($mockRestRequest);

        $this->object->putAction();

        //{"metadata":{"url":"service.planeonline.local","endpoint":"\ /plane","method":"PUT","results":1,"success":1,"failed":0},"results": [{"metadata":{"status":"updated","code":"200","model":"Plane"},"result":{"id":1,"user":1,"make":1,"title":"SK-101","description":"Introducing the world2019s most popular aircraft. ","created":"2014-07-26 21:16:53","updated":"2014-07-26 21:16:53","status":1}}]}'
        //{"metadata":{"url":"service.planeonline.local","endpoint":"\\/plane","method":"PUT","results":3,"success":3,"failed":0},"results":\[{"metadata":{"status":"updated","code":"200","model":"Plane"},"result":{"id":1,"user":101,"make":101,"title":"SK-101","description":"Introducing the world2019s most popular aircraft. ","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","status":1}},{"metadata":{"status":"updated","code":"200","model":"Plane"},"result":{"id":2,"user":102,"make":102,"title":"SK-102","description":"Introducing the world2019s most popular aircraft. ","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","status":1}},{"metadata":{"status":"updated","code":"200","model":"Plane"},"result":{"id":3,"user":103,"make":101,"title":"SK-103","description":"Introducing the world2019s most popular aircraft. ","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","status":1}}]}

        $outputRegex = '{"metadata":{"url":"service.planeonline.local","endpoint":"\\\/plane","method":"PUT","results":1,"success":1,"failed":0},"results":\[{"metadata":{"status":"updated","code":"200","model":"Plane"},"result":{"id":1,"user":1,"make":1,"title":"SK-101","description":"Introducing the world2019s most popular aircraft. ","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","status":1}}]}';

        $this->expectOutputRegex($outputRegex);
    }

    /**
     * @covers RESTFulPhalcon\RestController::deleteAction
     * @todo   Implement testDeleteAction().
     */
    public function testDeleteAction()
    {

        $_SERVER["REQUEST_METHOD"] = "DELETE";

        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $raw = array(
            array("id"=>"1"),
            array("id"=>"3"),
        );

        $guessedModelName = $this->object->getDefaultModel(true);
        $this->assertEquals('Plane',$guessedModelName);

        $mockRestRequest = $this->getMock("RESTFulPhalcon\RestRequest", array("getParams"));

        $mockRestRequest->expects($this->once())
            ->method("getParams")
            ->will($this->returnValue($raw));

        $this->object->setRestRequest($mockRestRequest);

        $this->object->deleteAction();

        $outputRegex = '{"metadata":{"url":"service.planeonline.local","endpoint":"\\\/plane","method":"DELETE","results":2,"success":1,"failed":1},"results":\[{"metadata":{"model":"Plane","code":"200","status":"deleted"},"result":{"id":1,"user":1,"make":1,"title":"SK-101","description":"Introducing the world2019s most popular aircraft. ","created":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","updated":"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}","status":0}},{"metadata":{"model":"Plane","code":"404","status":"Not Found"},"result":\["There is no Plane with id 3 avilable"]}]}';
        $this->expectOutputRegex($outputRegex);

    }
}
