<?php

namespace RESTFulPhalcon;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-14 at 19:14:01.
 */
class RestResponseTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var RestResponse
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new RestResponse;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RESTFulPhalcon\RestResponse::setUrl
     * @todo   Implement testSetUrl().
     */
    public function testSetUrl() {        
        $url = "http://someurl";
        $this->assertNull($this->object->getUrl());
        $this->object->setUrl($url);
        $this->assertEquals("http://someurl",$this->object->getUrl());
    }

    /**
     * @covers RESTFulPhalcon\RestResponse::setEndpoint
     * @todo   Implement testSetEndpoint().
     */
    public function testSetEndpoint() {        
        $this->assertNull($this->object->getEndpoint());
        $this->object->setEndpoint("endpoint?id=1&someMore=criteria");
        $this->assertEquals("endpoint",$this->object->getEndpoint());
    }

    /**
     * @covers RESTFulPhalcon\RestResponse::addResult
     * @todo   Implement testAddResult().
     */
    public function testAddResult() {
        $this->assertEmpty($this->object->getResults());
        
        $result = new \RESTFulPhalcon\Response\RestResponseResult('GET');
        $this->object->addResult($result);
        
        $this->assertCount(1, $this->object->getResults());
        $this->assertEquals('GET', $this->object->getMethod());
    }

    /**
     * @covers RESTFulPhalcon\RestResponse::getResults
     * @todo   Implement testGetResults().
     */
    public function testGetResults() {
        $this->assertEmpty($this->object->getResults());
        
        for($i = 1 ; $i <= 10 ; $i++){            
            $this->object->addResult(new \RESTFulPhalcon\Response\RestResponseResult('GET'));
        }
        
        $this->assertCount(--$i, $this->object->getResults());
        $this->assertEquals('GET', $this->object->getMethod());        
    }    
    
    /**
     * @covers RESTFulPhalcon\RestResponse::setMethod
     * @todo   Implement testSetMethod().
     */
    public function testSetMethod() {
                
        $this->assertNull($this->object->getMethod());
        
        $obj = json_decode($this->object);
        $this->assertTrue(isset($obj->metadata->success));
        $this->assertTrue(isset($obj->metadata->failed));
        $this->assertTrue(isset($obj->metadata->results));
                
        $this->object->setMethod('GET');
        $this->assertEquals('GET',$this->object->getMethod());
        
        $obj = json_decode($this->object);
        $this->assertFalse(isset($obj->metadata->success));
        $this->assertFalse(isset($obj->metadata->failed));
        $this->assertFalse(isset($obj->metadata->results));
                
        $this->object->setMethod('POST');
        $this->assertEquals('POST',$this->object->getMethod());
        
        $obj = json_decode($this->object);
        $this->assertTrue(isset($obj->metadata->success));
        $this->assertTrue(isset($obj->metadata->failed));
        $this->assertTrue(isset($obj->metadata->results));
    }

    /**
     * @covers RESTFulPhalcon\RestResponse::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString() {
        
        $this->assertEquals('{"metadata":{"url":null,"endpoint":null,"method":null,"results":0,"success":0,"failed":0},"results":[]}', (string)$this->object);
        $result = new \RESTFulPhalcon\Response\RestResponseResult('GET');
        $this->object->addResult($result);
        $this->assertEquals('{"metadata":{"url":null,"endpoint":null,"method":"GET"},"results":[{"metadata":{"status":null,"code":null,"model":null,"criteria":null,"size":null},"result":[]}]}', (string)$this->object);
    }

}
