<?php
use RESTFulPhalcon\RestModel,
    RESTFulPhalcon\RestModel\Validator,
    Phalcon\Mvc\Model\Validator\StringLength,
    Phalcon\Mvc\Model\Validator\Numericality;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-26 at 15:41:43.
 */
class RestModelTest extends \DBUnitTestCase
{
    /**
     * @var RestModel
     */
    protected $object;

    /**
     * @var RESTFulPhalcon\RestModel\Validator
     */
    protected $validator;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp(\Phalcon\DiInterface $di = NULL, \Phalcon\Config $config = NULL)
    {
        $config = new \Phalcon\Config\Adapter\Ini(CONFIG_PATH);
        parent::setUp($di,$config);

        $this->object = $this->getMockBuilder('RESTFulPhalcon\RestModel')
            ->setMockClassName('note')
            ->setMethods(array('getValidators'))
            ->getMock();

//        $this->object = $this->getMock('\RESTFulPhalcon\RestModel',null,array(),'note');

        //$this->validator = $this->getMockForAbstractClass('RESTFulPhalcon\RestModel\Validator',array(),'PlaneValidator');
        $this->validator = $this->getMockForAbstractClass('RESTFulPhalcon\RestModel\Validator',array());

        $this->object->expects($this->any())
            ->method('getValidators')
            ->will($this->returnValue($this->validator));

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
    }

    protected function getFixture(){
        return dirname(__FILE__)."/fixtures/notes.yml";
    }

    /**
     * @covers RESTFulPhalcon\RestModel::validation
     * @todo   Implement testValidation().
     */
    public function testValidation()
    {
        // test not having any validator registered returns true
        $this->assertTrue($this->object->validation());

        $this->validator->add(new Numericality(array(
            'field'=> 'note')));

        $this->validator->add(new StringLength(array(
            'field'=> 'note',
            'max' => 11,
            'min' => 3,
            'messageMaximum' => 'Maximum length for note id is (11)',
            'messageMinimum' => 'Minimum length for note id is (1)')));

        $this->object->expects($this->any())
            ->method('getValidators')
            ->will($this->returnValue($this->validator));

        $this->assertInstanceOf('RESTFulPhalcon\RestModel\Validator',$this->object->getValidators());

        $this->assertTrue($this->object->validation(array(
            'note' => 123,
            )));
        $this->assertFalse($this->object->validation(array(
            'note' => 12,
            )));
        $this->assertFalse($this->object->validation(array(
            'note' => 123456789011,
            )));
        $this->assertFalse($this->object->validation(array(
            'note' => 'abcd',
            )));


    }

    /**
     * @covers RESTFulPhalcon\RestModel::create
     * @todo   Implement testCreate().
     */
    public function testCreate()
    {

        $this->truncate('note');
        $this->assertEquals(0,$this->getConnection()->getRowCount('note'), "note's table expected to be empty");

        $note = $this->getDataSet()->getTable('note')->getRow(0);

        unset($note['id']);
        unset($note['created']);
        unset($note['updated']);


        $this->assertTrue($this->object->create($note));
        $this->assertEquals(1,$this->getConnection()->getRowCount('note'), "Failed inserting record");


    }


}
